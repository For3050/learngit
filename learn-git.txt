Git教程
一、安装Git
	
	1，安装：
	
		sudo apt-get install git
	
	2，设置用户名和邮箱：
	
		git config --global user.name "name"
		
		git config --global user.email "email@example.com"
	
二、创建版本库

	1，	初始化所在目录为git仓库：

			git init 

	2，	提交文件到仓库：

		第一步：一次添加多个文件到仓库。
		
				git add file.name1 file.name2 ...

		第二步：一次性提交所有添加的文件到仓库并注释。
		
				git commit -m "explanation"
				
三、时光机穿梭

	1，查看仓库当前状态：（4种状态，干净的、已修改未添加到暂存区的、已添加到暂存区未提交的、未跟踪的）
	
		git status

	2，查看修改内容：
	
		git diff
		
3.1	版本回退

	1，查看修改的历史纪录：
	
		git log
		
		单行显示：
		
		git log --pretty=oneline
		
	2，版本回退（HEAD表示当前版本，HEAD^表示上一版本，HEAD~num表示上num个版本）：
	
		git reset --hard HEAD^
		
	3，撤销版本回退：如果命令行窗口没有关掉，知道版本的commitID，则：
	
		git reset --hard commitID
		
	3-1，查看命令记录：（包含撤销版本回退的通用方法）：
	
		git reflog
		
3.2	工作区和暂存区

	1，工作区就是直接看到的目录；
	
	2，工作区有个隐藏目录（ls -ah）.git，是Git的版本库。其中存放了叫做stage（或者叫index）的暂存区，
	
		还有git自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
		
	3，git add 命令就是把文件修改添加到暂存区stage。
	
		git commit -m "commit" 命令就是把暂存区的所有内容提交更改到当前分支。

3.3	管理修改

	1，每一次修改如果不用git add 命令，那么就不能够把修改添加到暂存区stage，这样当使用git commit命令时，
	
		也就不能把这些修改提交到当前分支了。
		
	2，查看工作区和版本库里最新版本的区别：
	
		git diff HEAD -- file.name
	
3.4	撤销修改

	1，	文件在工作区修改后，想返回到最近一次git commit / git add 的状态：
	
		git checkout -- file.name
		
		命令中 -- 很重要，没有的话就变成“切换到另一个分支”的命令。
		
	2，	文件修改并git add到暂存区后，如果想把暂存区的修改撤销掉（unstage）：
	
		git reset HEAD file.name
		
		如果还想把工作区的修改丢弃：
		
		git checkout -- file.name
		
	3，	丢弃工作区的修改：
	
		git checkout -- file.name
		
	4，	场景：
	
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
		
			第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

3.5	删除文件

	1，删除文件的步骤：
	
		1，	在Git中添加并提交一个新文件 test.txt；
		
			git add test.txt；
			
			git commit -m "test txt"
			
		2，	查看git的状态：
		
			git status
			
		3-1，	如果要撤销删除操作，使用以下命令丢弃工作区的修改，相当于恢复误删文件到最新版本：
		
			git checkout -- file.name
			
		3-2，	如果确实要从版本库中删除该文件，使用下面命令：
		
			git rm file.name
			
			git commit -m "remove test.txt"

四、远程仓库
	
	1，	创建SSH Key：
	
		ssh-keygen -t rsa -C "youremail@example.com"

		然后一路回车，在用户主目录里找到.ssh目录（隐藏状态），里面有私钥id_rsa和公钥id_rsa.pub。
		
	2，	登陆GitHub->Account settings->SSH Key，点击“Add SSH Key”，填上任意Title，粘贴id_rsa.pub文件的内容。
	
4.1	添加远程库（Github）	

	1，	把Github添加为远程库的步骤：
	
		1，	登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库；
		
		2，	在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个
		
		新的Git仓库；
		
		3，	根据github的提示，在本地的learngit仓库下运行命令，与GitHub关联：
		
			git remote add origin git@github.com:michaelliao/learngit.git
			
		4，	把本地库的所有内容推送到远程库origin上：
		
			git push -u origin master
			
			由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的
			
			远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以
			
			简化命令。
		5，	上述步骤之后，通过下面命令把本地 master 分支的最新修改推送到GitHub：
		
			git push origin master
			
	2，	小结：
	
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。
		
4.2	从远程库克隆
	
	1，	准备好远程库的地址，使用以下命令克隆一个本地库：
	
		git clone git@github.com:For3050/gitskills.git
		
五、分支管理

5.1	创建与合并分支
	
	1，	创建并切换到dev分支：
	
		git checkout -b dev
		
		相当于以下两条命令：
		
		git branch dev
		git checkout dev
		
	2，	查看当前分支：
	
		git branch
		
		当前分支前面会有一个*号。
		
	3，	在dev分支做修改提交，然后切换回master分支，会发现master分支没有变化。
		
		git checkout master		//切换到master分支
		
	4，	合并dev分支到master：
	
		git merge dev
		
		使用的是快进模式fast-forward
	
	5，	删除dev分支：
	
		git branch -d dev
		
		查看分支：
		
		git branch

	6，	小结：
	
		Git鼓励大量使用分支：

		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

5.2	解决冲突

	1，	创建新的分支feature1:
	
		git checkout -b feature1
		
		修改提交readme.txt：

		git add readme.txt
		
		git commit -m "conflict1"

	2，	切换到master分支：
	
		git checkout master
		
		修改提交readme.txt：

		git add readme.txt
		
		git commit -m "conflict2"		
	
	3，	尝试快速合并：
	
		git merge feature1
		
		显示冲突，查看冲突的文件：
		
		git status
		
		或者直接查看冲突文件，修改后提交：
		
		git add readme.txt
		
		git commit -m "conflict fixed"		
	
	4，	查看分支合并图：
	
		git log --graph
		
	5，	删除feature1分支。
	
		git branch -d feature1
		
	
	
5.3	分支管理策略

	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

	下面我们实战一下--no-ff方式的git merge：
	
	1，	禁用快速合并fast forward的合并：
	
		 git merge --no-ff -m "merge with no-ff" dev
		 
		 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

5.4	Bug分支
	
	1，	场景：

		软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以
		
		通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。当你接到一个修复一个代号101的bug的任务
		
		时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：幸好，
		
		Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

	2，	步骤：
	
		1，	储存工作现场：
		
			git stash
			
			这时用git status 查看工作区就是干净的。
			
		2，	在有bug的分支master创建临时分支issue-101:
		
			git checkout master
			
			git checkout -b issue-101
			
		3，	在临时分支修复bug，并添加提交：
		
			git add bug.file
			
			git commit -m "fixed bug"
			
		4，	修复完bug，切换到有bug的分支，合并后删除临时分支issue-101。
		
			git checkout master
			
			git merge --no-ff -m "merged fixed-bug 101" issue-101
			
			git branch -d issue-101
			
		5，	返回dev分支，查看并恢复隐藏的现场：
		
			git checkout dev
			
			git stash list
			
			git stash apply		//恢复隐藏的现场

			git stash drop		//丢弃隐藏的现场
			
			git stash pop		//恢复并丢弃隐藏的现场
			
			多次隐藏stash，恢复的时候：
			
			git stash list 		//先查看隐藏的现场
			
			git stash apply stash@{0}	//恢复制定的隐藏stash
			
5.5	Feature分支

	1，	场景：
	
		软件开发中，总有无穷无尽的新的功能要不断添加进来。添加一个新功能时，你肯定不希望
		
		因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，
		
		在上面开发，完成后，合并，最后，删除该feature分支。
		
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

	2，	步骤：
	
		1，	在dev分支上新建一个分支new-feature，各种修改提交:
		
			git checkout -b new-feature
			
			git add file1 file2 file3
			
			git commit -m "commited file1 file2 file3"
			
		2，	回到dev分支，准备合并new-feature分支：
		
			git checkout dev
			
		3，	突然说要删除new-feature 功能：
		
			git branch -D new-feature


5.6	多人协作

	1，	场景：
	
		因此，多人协作的工作模式通常是这样：

		首先，可以试图用git push origin <branch-name>推送自己的修改；

		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

		如果合并有冲突，则解决冲突，并在本地提交；

		没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
		
		用命令git branch --set-upstream-to <branch-name> origin/<branch-name>
	
	2，	小结：
	
		查看远程库信息，使用git remote -v；

		本地新建的分支如果不推送到远程，对其他人就是不可见的；

		从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支
		的名称最好一致；

		建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

5.7	Rebase
	
	1，	小结：
	
		rebase操作可以把本地未push的分叉提交历史整理成直线；

		rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
		
六、标签管理
	
	标签和commit的ID号作用相同，但是标签更直观。

6.1	创建标签

	1，	首先切换到需要打标签的分支，然后打标签到最新的提交上：
	
		git checkout master
		
		git tag v1.0
		
		用git tag 查看所有标签。
		
	2，	给以前的提交打标签：
	
		先找到此提交的commit ID，然后打标签：
		
		git log --pretty=oneline --abbrev-commit
		
		git tag tagname commitID
		
		查看标签信息：
		
		git show tagname
	
	3，	创建带有说明的标签：
	
		用 -a 指定标签名， -m指定说明文字：
		
		git tag -a v0.1 -m "version 0.1 released" commitID
		
6.2	操作标签

	1，	删除本地标签：
	
		git tag -d v0.1
		
	2，	推送某个标签到远程：
	
		git push origin tagname
		
		一次性推送全部尚未推送的本地标签到远程：
		
		git push origin --tags
		
	3，	删除远程标签：
	
		先删除本地标签：
		
		git tag -d v0.1
		
		再删除远程标签：
		
		git push origin :refs/tags/v0.1
		
6.3	使用github

	1，	首先在GitHub上fork仓库，然后克隆到本地。
	
		git clone 仓库地址

	2，	

七、自定义Git

	1，	配置git颜色：
	
		git config --global color.ui true
		
7.1	忽略特殊文件
	
	1，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

		配置可以参考：https://github.com/github/gitignore
	
		忽略文件的原则是：

		忽略操作系统自动生成的文件，比如缩略图等；
		忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
		忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

	2，	通过 -f 强制添加被.gitignore自动忽略的文件：
	
		git add -f app.class
		
		通过命令检查git ignore有问题的规则：
		
		git check-ignore -v app.class
		
	3，	.gitignore 文件本身要放到版本库里，也可以对其做版本管理。
	
7.2	配置别名

	1，	给命令配置别名：status -> st 
	
		git config --global alias.st status
		
		--global参数是全局参数，作用范围在本台电脑下所有git仓库。如果不加，只针对当前仓库。
		
	2，	丧心病狂：
	
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

	3，	删除别名：
	
		每个仓库的Git配置文件都放在.git/config文件中，当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
		
		别名就在[alias]后面，直接删除对应的行删除别名。


7.3	搭建Git服务器

	准备一台运行Linux的服务器，推荐Debian和Ubuntu：
	
	1，	安装Git：
	
		sudo apt-get install git
		
	2，	创建一个git用户用来运行git服务：
	
		sudo adduser git
		
	3，	创建证书登陆：
	
		收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，
		
		把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个
	
	4，	初始化git仓库：
	
		先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
	
		sudo git init --bare sample.git
		
		服务器上的Git仓库通常都以.git结尾，把owner改为git。
	
		sudo chown -R git:git sample.git
	
	5，	禁用shell登录：
	
		出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
	
		git:x:1001:1001:,,,:/home/git:/bin/bash
		
		改为：
		
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		
		
	6，	克隆远程仓库：
	
		 git clone git@server:/srv/sample.git
	
	
八、期末总结

	Git的官方网站：http://git-scm.com

九、实用场景

	1，场景：https://blog.csdn.net/s740556472/article/details/80087026
		公司一台电脑，家里一台电脑，每天晚上都要更新代码到GitHub上。遇到的问题是每次都
		要更新远程仓库代码到本地，解决push冲突的问题。
		
		具体操作：
		1，查看远程地址：
			git remote -v
			
		2，	fetch命令拉取远程仓库主分支，并且拉到本地temp分支暂存。
			git fetch origin master:temp
			
		3，	切换到要合并的分支，然后合并。
			git checkout ota-dev
			git merge temp
			
		4，	版本合并后，push ota-dev分支远程仓库代码。
			git push origin ota-dev
			
		5，	删除暂存分支，查看本地分支。
			git branch -d temp
			git branch

	2，	场景：
	






















	
	
	
	
	
	
	
	
	
	
	

